#!/bin/bash
SSH_PORT="22"
CTL1_MGNT_IP="{{ hostvars[groups['controller'][0]]['ansible_' + MGNT_IF]['ipv4']['address'] }}"
CTL2_MGNT_IP="{{ hostvars[groups['controller'][1]]['ansible_' + MGNT_IF]['ipv4']['address'] }}"
CTL3_MGNT_IP="{{ hostvars[groups['controller'][2]]['ansible_' + MGNT_IF]['ipv4']['address'] }}" #"{{ hostvars[groups['controller'][2]].MGNT_IP }}"
function rotate_key ()
{
    if [[ "$HOST" == controller1* ]]; then
        host_list="$CTL2_MGNT_IP:$SSH_PORT $CTL3_MGNT_IP:$SSH_PORT"
    elif [[ "$HOST" == controller2* ]]; then
        host_list="$CTL1_MGNT_IP:$SSH_PORT $CTL3_MGNT_IP:$SSH_PORT"
    elif [[ "$HOST" == controller3* ]]; then
        host_list="$CTL1_MGNT_IP:$SSH_PORT $CTL2_MGNT_IP:$SSH_PORT"
    fi    

    cp {{ ansible_deploy_files }}/fernet-rotate.sh /usr/bin/
    sed -i "2s/.*/host_list=\"$host_list\"/" /usr/bin/fernet-rotate.sh
    chmod +x /usr/bin/fernet-rotate.sh

}    # ----------  end of function rotate_key  ----------



function cron_generate ()
{
    echo "Generate Crontab to rotate and Distributed Token"
    sleep 10
    #test -f fernet_rotate_cron_generator.py | rm -f fernet_rotate_cron_generator.py
    python3 {{ ansible_deploy_files }}/fernet_rotate_cron_generator.py -t $1 -i $2 -n $3 > /tmp/keystone_cron.txt

    fernet_rotate_log={{ fernet_rotate_log_file }}
    test -f  $fernet_rotate_log | touch $fernet_rotate_log
    chown keystone:keystone $fernet_rotate_log

    fernet_rotate_crontab={{ fernet_rotate_crontab_file }}
    test -f $fernet_rotate_crontab | rm -f $fernet_rotate_crontab

    export PYTHONIOENCODING=utf8
    len=`cat /tmp/keystone_cron.txt | python3 -c "import sys, json; print(int(len(json.load(sys.stdin)['cron_jobs']))-1)"`
    for i in `seq 0 $len`; do
        hour=`cat /tmp/keystone_cron.txt | python3 -c "import sys, json; print json.load(sys.stdin)['cron_jobs'][$i]['hour']"`
        min=`cat /tmp/keystone_cron.txt | python3 -c "import sys, json; print json.load(sys.stdin)['cron_jobs'][$i]['min']"`
        echo "$min $hour  * * *  /usr/bin/fernet-rotate.sh >> /var/log/keystone/keystone-fernet-rotate.log 2>&1" >> $fernet_rotate_crontab
    done

  # chgrp crontab $fernet_rotate_crontab
    chown keystone $fernet_rotate_crontab
    chmod 600 $fernet_rotate_crontab
}



function download_fernet_key ()
{
    /usr/bin/rsync -azu --delete -e "ssh -i /var/lib/keystone/.ssh/id_rsa -p 22 -F /var/lib/keystone/.ssh/config" keystone@controller1:/etc/keystone/fernet-keys/ /etc/keystone/fernet-keys
}    # ----------  end of function download_fernet_key  ----------


token_expiration={{ token_expiration_keystone }}
token_expired_min=`echo $token_expiration*60 | bc`
token_expired_sec=`echo $token_expiration*60*60 | bc`
number_keystone_node={{ groups['controller'] | length }} 
rotation_frequency=`echo $token_expired_sec / $number_keystone_node | bc`
max_active_keys=`echo $token_expired_sec / $rotation_frequency + 2 | bc`

HOST=`cat /etc/hostname`
    if [ "$HOST" == "{{ hostvars[groups['controller'][0]]['inventory_hostname'] }}" ]; then
        rotate_key "{{ hostvars[groups['controller'][0]]['inventory_hostname_short'] }}"
        cron_generate $token_expired_min 0 $number_keystone_node
    else 
            echo "Config OpenStack Keystone Services"
            sleep 5
            hostname=`cat /etc/hostname`
        if [[ "$HOST" == {{ hostvars[groups['controller'][1]]['inventory_hostname_short'] }}* ]]; then
            rotate_key "{{ hostvars[groups['controller'][1]]['inventory_hostname_short'] }}"
            cron_generate $token_expired_min 1 $number_keystone_node
            download_fernet_key
        elif [[ "$HOST" == {{ hostvars[groups['controller'][2]]['inventory_hostname_short'] }}* ]]; then
            rotate_key "{{ hostvars[groups['controller'][2]]['inventory_hostname_short'] }}"
            cron_generate $token_expired_min 2 $number_keystone_node
            download_fernet_key
        fi
    fi
   # ----------  end of function main  ----------


