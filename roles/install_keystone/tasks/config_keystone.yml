---
- name: Check /etc/keystone/keystone.conf.bak existed
  stat:
    path: /etc/keystone/keystone.conf.bak
  register: keystone_conf_bak

- name: Backup file config keystone.conf
  copy:
    src: /etc/keystone/keystone.conf
    dest: /etc/keystone/keystone.conf.bak
    remote_src: yes
  when: 
    - not keystone_conf_bak.stat.exists

- name: Config file keystone.conf
  template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
  notify:
    - restart service httpd

- name: Check if table exist
  command: mysql -uroot -p{{ mariadb_pass }} -e"SHOW TABLES FROM `keystone` LIKE 'endpoint';"
  check_mode: no
  failed_when: false
  changed_when: false
  register: keystonedb_table
  run_once: yes

- name: Sync databases
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone
  run_once: true
  when:
    - region_name == region_main_site
    - my_action == "deploy"
    - keystonedb_table.stdout == ""

- name: Initialize Fernet key repositories
  shell: |
    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
  check_mode: no
  failed_when: false
  changed_when: false
  run_once: true
  when:
     - my_action == "deploy"

- name: Copy credential key to other node
  synchronize:
     src: /etc/keystone/credential-keys
     dest: /etc/keystone/
     mode: pull
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups['controller'] }}"
  run_once: yes 
  when: 
    - my_action == "deploy"

- name: Copy fernet key to other node
  synchronize:
     src: /etc/keystone/fernet-keys
     dest: /etc/keystone/
     mode: pull
  delegate_to: "{{ item }}"
  with_items:
    - "{{ groups['controller'] }}"
  run_once: yes 
  when: 
    - my_action == "deploy"

# - name: Chown group, user keystone
#   file:
#     path: "{{ item }}"
#     owner: keystone
#     group: keystone
#     mode: u=rwX,g=rX
#     recurse: yes
#     state: directory
#   with_items:
#      - /etc/keystone

- name: Start service httpd
  systemd:
    state: started
    enabled: true
    name: httpd

- meta: flush_handlers


- name: Wait until listening on Port {{ keystone_port }}
  wait_for:
    host: "{{ ip_vip_address }}"
    port: "{{ keystone_port }}"
    delay: 10
    msg: " Please check Resource IP VIP"
    timeout: 15

