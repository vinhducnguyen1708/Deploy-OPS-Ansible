---
- name: Check /etc/keystone/keystone.conf.bak existed
  stat:
    path: /etc/keystone/keystone.conf.bak
  register: keystone_conf_bak

- name: Backup file config keystone.conf
  copy:
    src: /etc/keystone/keystone.conf
    dest: /etc/keystone/keystone.conf.bak
    remote_src: yes
  when: 
    - not keystone_conf_bak.stat.exists

- name: Config file keystone.conf
  template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
  notify:
    - restart service httpd
    - sleep for 10s and continue with play
    - Create script test system

- name: Sync databases
  shell: su -s /bin/sh -c "keystone-manage db_sync" keystone
  run_once: true
  when: my_action == "deploy"

- name: Initialize Fernet key repositories
  shell: |
    keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
    keystone-manage credential_setup --keystone-user keystone --keystone-group keystone
  when:
     - inventory_hostname_short ==  hostvars[groups['controller'][0]]['inventory_hostname_short']
     - my_action == "deploy"

- name: Copy credential key to other node
  synchronize:
     src: /etc/keystone/credential-keys
     dest: /etc/keystone/
     mode: pull
  delegate_to: "{{ item }}"  
  with_items:   
    - "{{ groups['controller'] }}"
  run_once: yes 
  when: 
    - inventory_hostname_short ==  hostvars[groups['controller'][0]]['inventory_hostname_short']        
    - my_action == "deploy"

- name: Copy fernet key to other node 
  synchronize:
     src: /etc/keystone/fernet-keys
     dest: /etc/keystone/
     mode: pull
  delegate_to: "{{ item }}"  
  with_items:   
    - "{{ groups['controller'] }}"
  run_once: yes 
  when: 
    - inventory_hostname_short ==  hostvars[groups['controller'][0]]['inventory_hostname_short']        
    - my_action == "deploy"

# - name: Chown group, user keystone
#   file:
#     path: "{{ item }}"
#     owner: keystone
#     group: keystone
#     mode: u=rwX,g=rX
#     recurse: yes
#     state: directory
#   with_items:
#      - /etc/keystone


- name: restart service httpd
  systemd:
    state: started
    enabled: true
    name: httpd

- name: sleep for 10s and continue with play
  wait_for:
    timeout: 10
  delegate_to: localhost
