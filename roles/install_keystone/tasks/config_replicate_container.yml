---
- name: Create user replicate
  mysql_user:
    login_port: "{{ mysql_cluster_port }}"
    login_host: "{{ other_site_ip_list[0] }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    name: "{{ replicate_user }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    password: "{{ replicate_pass }}"
    state: present
  delegate_to: "{{ other_site_ip_list[0] }}" 
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  run_once: yes

- name: Create database for Keystone
  mysql_db:
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    name: keystone
    state: present

- name: Create user for Keystone
  mysql_user:
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    name: keystone
    host: "{{ item }}"
    password: "{{ keystonedb_pass }}"
    priv: 'keystone.*:ALL'
    state: present
  with_items:
    - 'localhost'
    - '%'

- name: Start slave
  mysql_replication:
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    mode: startslave

- name: Check slave status
  mysql_replication:
    mode: getslave
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
  register: _getslave

- name: Lock read Tables
  mysql_variables:
    login_port: "{{ mysql_cluster_port }}"
    login_host: "{{ item }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    variable: read_only
    value: 1
  delegate_to: "{{ item }}"
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_items:
     - "{{ other_site_ip_list }}" 
  run_once: yes
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )    

- name: Configuration | Replication | Check master replication status
  mysql_replication:
    login_port: "{{ mysql_cluster_port }}"
    login_host: "{{ item }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    login_user: root
    login_password: "{{ mariadb_pass }}"
    mode: getmaster
  delegate_to: "{{ item }}"
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_items:
     - "{{ other_site_ip_list }}"
  register: master
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Dump Keystone database from Site HN
  mysql_db:
    login_port: "{{ mysql_cluster_port }}"
    login_host: "{{ item[0] }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    name: keystone
    state: dump
    target: "/tmp/keystone-{{ item[1] }}.sql"
  delegate_to: "{{ item[0] }}"
  run_once: yes
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_together:
     - "{{ other_site_ip_list }}"
     - "{{ list_hostname_short }}"
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Sync databases keystone file to site 2
  synchronize:
     src: "/tmp/keystone-{{ item[1] }}.sql"
     dest: "/tmp/keystone-{{ item[1] }}.sql"
     mode: push
  delegate_to: "{{ item[0] }}"
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_together: 
    - "{{ other_site_ip_list }}"
    - "{{ list_hostname_short }}"
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Import DB Keystone to container Mariadb
  mysql_db:
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    name: keystone
    state: import
    target: "/tmp/keystone-{{ inventory_hostname_short }}.sql"
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Delete database file
  file: 
    path: "/tmp/keystone-{{ inventory_hostname_short }}.sql"
    state: absent
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Unlock tables for site 1
  mysql_variables:
    login_port: "{{ mysql_cluster_port }}"
    login_host: "{{ item }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    login_unix_socket: /var/lib/mysql/mysql.sock
    variable: read_only
    value: 0
  delegate_to: "{{ item }}"
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_items:
     - "{{ other_site_ip_list }}" 
  run_once: yes
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Stop slave
  mysql_replication:
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    mode: stopslave
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Set fact All master_log_position on main site
  set_fact:
    all_dbmaster_position_main_site: "{{ item.Position }}"
  with_items:
    - "{{ master.results }}"
  register: all_dbmaster_position_main_site_result
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Set all master_log_position from main site to a list
  set_fact:
    list_dbmaster_position_main_site: "{{ all_dbmaster_position_main_site_result.results | map(attribute='ansible_facts.all_dbmaster_position_main_site') | list }}"
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Set fact All master_log_file on main site
  set_fact:
    all_dbmaster_file_main_site: "{{ item.File }}"
  with_items:
    - "{{ master.results }}"
  register: all_dbmaster_file_main_site_result
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Set all master_log_file from main site to a list
  set_fact:
    list_dbmaster_file_main_site: "{{ all_dbmaster_file_main_site_result.results | map(attribute='ansible_facts.all_dbmaster_file_main_site') | list }}"
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Config Replicate for DB container
  mysql_replication:
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ item[3] }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    mode: changemaster
    master_host: "{{ item[0] }}"
    master_user: "{{ replicate_user }}"
    master_password: "{{ replicate_pass }}"
    master_port: "{{ mysql_cluster_port }}"
    master_connect_retry: 10
    master_log_file: "{{ item[1] }}"
    master_log_pos: "{{ item[2] }}"
  delegate_to: "{{ item[3] }}"
  vars:
     ansible_port: "{{ ssh_port_other_site }}"
  with_together:
    - "{{ other_site_ip_list }}"
    - "{{ list_dbmaster_file_main_site }}"
    - "{{ list_dbmaster_position_main_site }}"
    - "{{ list_management_ip }}"
  run_once: yes
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )

- name: Start replication
  mysql_replication:
    login_port: "{{ mysql_container_slave_port }}"
    login_host: "{{ management_ip_address }}"
    login_user: root
    login_password: "{{ mariadb_pass }}"
    mode: startslave
  when:
     - ( not _getslave.Is_Slave | bool  or not _getslave.Slave_IO_Running | bool or not _getslave.Slave_SQL_Running | bool or _getslave.Seconds_Behind_Master | int > 100 )
