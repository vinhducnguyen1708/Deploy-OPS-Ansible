---
- hosts: controller
  gather_facts: true
  become: yes
  tasks:
      - name: Create selfservice network
        os_network:
           auth: "{{ openstack_auth }}"
           state: present
           name: "{{ selfservice_network_name }}"
           shared: yes
           ca_cert: "/etc/ssl/private/{{ cafile_name }}.pem"
        run_once: yes
      - name: Create provider network
        os_network:
           auth: "{{ openstack_auth }}"
           state: present
           name: "{{ provider_network_name }}"
           shared: yes
           external: true
           project: admin
           provider_network_type: "{{ provider_network_type }}"
           provider_physical_network: "{{ provider_physical_network }}"
           ca_cert: "{{ openstack_cacert }}"
        run_once: yes
      - name: Create subnet for  provider network
        os_subnet:
           auth: "{{ openstack_auth }}"
           state: present
           network_name: "{{ provider_network_name }}"
           name: "{{ sub_provider_network_name }}"
           cidr: "{{ provider_network_address }}"
           enable_dhcp: yes
           allocation_pool_start: "{{ provider_pool_start }}"
           allocation_pool_end: "{{ provider_pool_end }}"
           dns_nameservers: "{{ provider_dns_nameservers }}"
           ca_cert: "{{ openstack_cacert }}"
        run_once: yes
      - name: Create subnet for selfservice network
        os_subnet:
           auth: "{{ openstack_auth }}"
           state: present
           network_name: "{{ selfservice_network_name }}"
           name: "{{ sub_selfservice_network_name }}"
           cidr: "{{ selfservice_network_address }}"
           enable_dhcp: yes
           allocation_pool_start: "{{ selfservice_pool_start }}"
           allocation_pool_end: "{{ selfservice_pool_end }}"
           dns_nameservers: "{{ selfservice_dns_nameservers }}"
           ca_cert: "{{ openstack_cacert }}"
        run_once: yes

      - name: Create router
        os_router:
           auth: "{{ openstack_auth }}"
           state: present
           name: "{{ router_name }}"
           project: admin
           network: "{{ provider_network_name }}"
           interfaces:
               - net: "{{ selfservice_network_name }}"
                 subnet: "{{ sub_selfservice_network_name }}"
           admin_state_up: yes
           enable_snat: yes
           ca_cert: "{{ openstack_cacert }}"
        run_once: yes
      - name: Create flavor
        os_nova_flavor:
           auth: "{{ openstack_auth }}"
           state: present
           name: "{{ flavor_name }}"
           ram: "{{ flavor_ram }}"
           vcpus: "{{ flavor_vcpus }}"
           disk: "{{ flavor_root_disk }}"
           ca_cert: "{{ openstack_cacert }}"
        run_once: yes

      - name: Add rules ICMP ingress  in security group
        os_security_group_rule:
            auth: "{{ openstack_auth }}"
            security_group: default
            protocol: icmp
            direction: ingress
            state: present
            remote_ip_prefix: 0.0.0.0/0
            ca_cert: "{{ openstack_cacert }}"
        run_once: yes
      - name: Add rules ICMP egress  in security group
        os_security_group_rule:
            auth: "{{ openstack_auth }}"
            security_group: default
            protocol: icmp
            direction: egress
            state: present
            remote_ip_prefix: 0.0.0.0/0
            ca_cert: "{{ openstack_cacert }}"
        run_once: yes
      - name: Upload Cirros image on OPS
        os_image:
            auth: "{{ openstack_auth }}"
            name: cirros
            container_format: bare
            disk_format: qcow2
            filename: /root/cirros-0.3.4-x86_64-disk.img
            is_public: yes
            ca_cert: "{{ openstack_cacert }}" 
            state: present
        run_once: yes
      - name: Create Cirros VM
        os_server:
            auth: "{{ openstack_auth }}"
            name: nguyenducvinh
            image: cirros
            flavor: tiny
            network: "{{ selfservice_network_name }}"
            ca_cert: "{{ openstack_cacert }}"
        run_once: yes
